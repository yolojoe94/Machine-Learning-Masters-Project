# -*- coding: utf-8 -*-
"""
Created on Mon Jan  8 16:04:30 2024

@author: thejo
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.ndimage import gaussian_filter


import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout
from tensorflow.keras.layers import Input
# from tensorflow.math import subtract
import tensorflow.math as tfm
import os
os.environ["KMP_DUPLICATE_LIB_OK"]="TRUE"

'''plan:
    make 2d space array
    define squares
    construct large array of pairs of squares at 10 deg separation
    train CNN to identify sin and cos of orientation angle
    train NN to find separation angle/stereo angle
    works with cos(4x) in 0-360 range
    
    '''

gamma_glob = None



def grid2d(size):
    '''creates values of coords up to image size, then makes grid of coords.
    does this _number_ of times to make 3d grid of unrelated slices'''
    xx, yy = np.meshgrid(np.linspace(0,size-1,size),
                            np.linspace(0,size-1,size), sparse=True)
    return xx, yy


def preprocess(x, y, grid, dim):
    '''recenters image using average mass position
    doesnt work on y height ??'''
    proc = np.where(grid>0.3, 1, 0)
    dx = np.sum(x*proc)/np.sum(proc)-dim/2
    dy = np.sum(y*proc)/np.sum(proc)-dim/2
    im = np.roll(proc, -int(np.round(dy)), axis=0)
    im = np.roll(im, -int(np.round(dx)), axis=1)
    #this is just not moving the y coord for some reason
    return im

def inside_square(space, center, size, angle, dim):
    '''takes consts and defines region where inside square, sets the grid values to 1, else 0'''
    #l is the max square radius
    nx = np.sin(angle)
    ny = np.cos(angle) #normal vectors to edge, to determine if coord is inside or outside edge
    im_sq = np.where((np.absolute((space[0]-center[0])*nx+(space[1]-center[1])*ny)<size/2)
                     & (np.absolute((space[0]-center[0])*ny-(space[1]-center[1])*nx)<size/2),
                     1, 0)
    #second condition uses tangent vectors to edge to find other two edges
    #absolute allows both edges to be considered at once
    #size/2 is the half side length
    im_sq = np.add(im_sq, np.random.random([dim,dim])/5) #unprocessed image
    im_sq = gaussian_filter(im_sq, sigma=0.1)
    return preprocess(grid2d(dim)[0], grid2d(dim)[1], im_sq, dim)


def data(dim, num, max_angle):
    '''creates dataset of num dim*(2*dim) images
    res determines number of intervals between 0 and 90 degrees
    returns arrays of shapes, the stereoimages for each shape and the angle between them'''
    a_s = np.zeros((num,3))
    c_s = np.zeros((num,2))
                      
    '''these are randomised start values for the shapes'''
    xcs = ((np.random.rand(num)-0.5)*2*dim/4 + dim/2)*0 + 3*dim/8
    ycs = ((np.random.rand(num)-0.5)*2*dim/4 + dim/2)*0 + dim/2
    length = ((np.random.rand(num)-0.5)*dim/4 + 5*dim/8)/1.2
    # length[:] = dim/2
    #this 0, 90 defines the angular range of results
    a1 = (np.random.uniform(0, max_angle, num))#in degrees
    a2 = a1+10
    c_s[np.arange(num), np.zeros(num,int)] = xcs
    c_s[np.arange(num), np.zeros(num,int)+1] = ycs #centers
    
    a_s[np.arange(num), np.zeros(num,int)] = (a1/180*np.pi)#in radians
    a_s[np.arange(num), np.zeros(num,int)+1] = (a2/180*np.pi)#in radians
    # a_s[np.arange(num), np.zeros(num,int)+2] = np.absolute((a2*10-a1*10))#in degrees
    a_s[np.arange(num), np.zeros(num,int)+2] = a1#in degrees
    '''this is important, the validation for the training is the first angle.
    that means we will be asking for only one angle as our final output'''
    a = grid2d(dim)#grid for making pixels on
    
    grid1=[] #this is the list containing all image 1s of 2s
    grid2=[] #stereopair images
    angle=[]
    for i in np.arange(num):
        c1 = inside_square(a, c_s[i], length[i], a_s[i][0], dim)
        c2 = inside_square(a, c_s[i], length[i], a_s[i][1], dim)
        grid1.append(c1)
        grid2.append(c2)
        angle.append(a_s[i][2])
    grids = np.hstack([np.array([grid1]).reshape(-1, dim, dim, 1)*1.0,
               np.array([grid2]).reshape(-1, dim, dim, 1)*1.0])
    return grids, a_s

def CNN_model(dim):
    '''takes an image input
    outputs an angle for the image orientation'''
    inputs = Input(shape=(dim, dim, 1))
    x = Conv2D(16, kernel_size=(3, 3), activation='relu')(inputs)
    x = MaxPooling2D(pool_size=(2, 2))(x)
    x = Dropout(0.1)(x)
    x = Conv2D(32, kernel_size=(3, 3), activation='relu')(x)
    x = MaxPooling2D(pool_size=(2, 2))(x)
    x = Dropout(0.1)(x)
    x = Conv2D(16, kernel_size=(3, 3), activation='relu')(x)
    x = MaxPooling2D(pool_size=(2, 2))(x)
    x = Dropout(0.1)(x)
    x = Flatten()(x)
    x = Dense(16, activation='relu')(x)
    outputs = Dense(2, activation='linear')(x)
    model = Model(inputs=inputs, outputs=outputs, name='cnn')
    model.summary()
    return model

def STEREO_model(dim,  num, batch_size, epochs):
    '''takes a double width dual image, splits and determines the angle of each
    then outputs a single angle
    in theory: it takes correct angles from both shapes and only returns shape two,
    this means you can give it a 0&unknown angle pair to get the unknowns,
    it is accurate on both as the same CNN is trained on each of images 1&2'''
   
    cnn_model = CNN_model(dim)
    
    inputs_st1 = Input(shape=(dim, dim, 1))
    inputs_st2 = Input(shape=(dim, dim, 1))
    
    #calculate angles of shape 1&2
    c1 = cnn_model(inputs_st1)
    c2 = cnn_model(inputs_st2)
    angle1 = tf.math.atan2(c1[:, 0], c1[:, 1], name="angle1")
    angle1 = tf.reshape(angle1, [-1, 1])
    angle2 = tf.math.atan2(c2[:, 0], c2[:, 1], name="angle2")
    angle2 = tf.reshape(angle2, [-1, 1])
    #difference in angle
    sub = tfm.subtract(angle2, angle1)
    #find index of lowest angle
    cs = tf.concat([tfm.subtract(angle1, tf.constant(6.2831853/2)),angle2],1)
    x = tfm.argmin(cs, output_type = tf.dtypes.int32, axis = 1)
    x = tf.reshape(x, [-1,1])
    #multiply 2pi(=4*90) by index: = {0; if 1 is smaller, 2pi; if 1 is larger}
    y = tfm.multiply(tf.constant(6.2831853), tf.cast(x, dtype = tf.dtypes.float32))
    y = tf.reshape(y, [-1,1])
    #add 2pi if sub was negative
    add = tfm.add(sub, y)
    #make it a layer so it can be called later
    add = Dense(1, activation=None, use_bias=False, trainable=False,
              kernel_initializer=keras.initializers.Constant(value=1.0), name="stereo_out")(add)
        
    stereo_model = Model(inputs=[inputs_st1, inputs_st2], outputs=add, name='stereo')
    stereo_model.summary()
    
    return stereo_model, cnn_model

def scatter_validation(model1, model2, dim, num, max_angle, batch_size, epochs, trial):
    '''take range of inputs and produce graph of them vs predicitons from a model
    y-axis: values of shape 1's angle
    x-axis: predicted angular separation
    trial is to show whether the model is expected to be trained'''
    
    #stereo
    test = data(dim, round(num), max_angle)
    X_st1 = test[0][:, :dim, :, :]
    X_st2 = test[0][:, dim:, :, :]
    X_test = [X_st1, X_st2]
    p = model1.predict(X_test)
    y_prediction = np.reshape(p, -1)
    plt.scatter(test[1][:,2], np.rad2deg(y_prediction)/4)
    plt.grid()
    plt.xlabel('Actual Values of shape 1')
    plt.ylabel('Separation prediction')
    plt.show()
    
    #cnn
    p1 = model2.predict(X_st1) #sin(4x), cos(4x)
    p2 = model2.predict(X_st2)
    p11 = np.arctan2(p1[:, 0], p1[:, 1]) #(4x)
    p22 = np.arctan2(p2[:, 0], p2[:, 1])
    angle1_pred = np.reshape(p11, -1)
    angle2_pred = np.reshape(p22, -1)
    #divide by 4 to account for sym=4 entending the graph
    plt.scatter(test[1][:,2], np.rad2deg(angle1_pred)/4, c='blue', label='shape 1') #(x)
    plt.scatter(test[1][:,2], np.rad2deg(angle2_pred)/4, c='orange', label='shape 2')
    plt.grid()
    plt.legend()
    plt.xlabel('Actual Values of shapes')
    plt.ylabel('Angle prediction of \nShapes 1&2')
    plt.show()
    
    plt.plot(test[1][:,2], np.rad2deg(angle1_pred)/4, '.', c='blue', label='shape 1')
    plt.grid()
    plt.legend()
    plt.xlabel('Actual Values of shape')
    plt.ylabel('Angle prediction of \nShape 1')
    plt.show()

from scipy.optimize import curve_fit as cf
def sin_fun(x,a,b,c,d):
    return a*np.sin(b*x + c)+d
def cos_fun(x,e,f,g,h):
    return e*np.cos(f*x + g)+h
plt.rcParams['figure.dpi'] = 300
def sine():
    test = data(64, 1024, 360)
    X_st1 = test[0][:, :dim, :, :]
    p1 = cnn1_model.predict(X_st1)
    t = test[1][:,0]
    tx = test[1][:,2]
    sp_opt,sp_cov=cf(sin_fun, t, p1[:, 0], p0=(100, 4, 0, 0))
    cp_opt,cp_cov=cf(cos_fun, t, p1[:, 1], p0=(100, 4, 0, 0))
    s_std = np.sqrt(np.diag(sp_cov))
    c_std = np.sqrt(np.diag(cp_cov))
    print(sp_opt)
    print(cp_opt)
    a,b,c,d = np.around(np.array(sp_opt),3)
    a2,b2,c2,d2 = np.around(np.array(s_std),3)
    e,f,g,h = np.around(np.array(cp_opt),3)
    e2,f2,g2,h2 = np.around(np.array(c_std),3)
    
    s4p = p1[:, 0]
    c4p = p1[:, 1]
    bs = (np.max(s4p)+np.min(s4p))/2
    bc = (np.max(c4p)+np.min(c4p))/2
    ns4p = (s4p-bs)/np.max(s4p-bs)
    nc4p = (c4p-bc)/np.max(c4p-bc)
    '''maybe error bars on curve fits'''
    '''need to fix prediction values from graphs'''
    # tp = p1[:, 0]/(p1[:, 1])
    # plt.scatter(t[np.abs(tp)<100],tp[np.abs(tp)<100], label='tan')
    # plt.scatter(tx, np.arctan2(p1[:, 0], p1[:, 1]), label = 'tan(4x)')
    
    plt.title(r'Fitting of a*sin(b*$\theta$ + c)+d to CNN predictions of sin($\theta$)')
    plt.xlabel(r'Orientation, $\theta$ (degrees)')
    plt.ylabel(r'Predicted sin($\theta$)')
    plt.scatter(tx, p1[:, 0], s=5, label='predicted data from CNN')
    plt.plot(np.sort(tx), a*np.sin(b*np.sort(t) + c)+d, 'red', label=fr'a={a}$\pm${a2}, b={b}$\pm${b2}, c={c}$\pm${c2}, d={d}$\pm${d2}')
    bottom, top = plt.ylim()  # return the current ylim
    plt.ylim((bottom, top*1.3))
    plt.legend()
    plt.show()
    
    plt.title(r'Fitting of e*cos(f*$\theta$ + g)+h to CNN predictions of cos($\theta$)')
    plt.xlabel(r'Orientation, $\theta$ (degrees)')
    plt.ylabel(r'Predicted cos($\theta$)')
    plt.scatter(tx, p1[:, 1], s=5, label='predicted data from CNN')
    plt.plot(np.sort(tx), e*np.cos(f*np.sort(t) + g)+h, 'red', label=fr'e={e}$\pm${e2}, f={f}$\pm${f2}, g={g}$\pm${g2}, h={h}$\pm${h2}')
    bottom, top = plt.ylim()  # return the current ylim
    plt.ylim((bottom, top*1.3))
    plt.legend()
    plt.show()
    
    plt.title(r'Normalised prediction of sin($\theta$) from CNN')
    plt.xlabel(r'Orientation, $\theta$ (degrees)')
    plt.ylabel(r'Predicted sin($\theta$)')
    plt.scatter(tx, ns4p, s=5, label='Normalised predicted data from CNN')
    plt.plot(np.sort(tx), np.sin(4*np.sort(t)+c), 'red', label=f'sin(4x+{c})')
    bottom, top = plt.ylim()  # return the current ylim
    plt.ylim((bottom, top*1.3))
    plt.legend()
    plt.show()
        
    plt.title(r'Normalised prediction of cos($\theta$) from CNN')
    plt.xlabel(r'Orientation, $\theta$ (degrees)')
    plt.ylabel(r'Predicted cos($\theta$)')
    plt.scatter(tx, nc4p, s=5, label='Normalised predicted data from CNN')
    plt.plot(np.sort(tx), np.cos(4*np.sort(t)+g), 'red', label=f'cos(4x+{g})')
    bottom, top = plt.ylim()  # return the current ylim
    plt.ylim((bottom, top*1.3))
    plt.legend()
    plt.show()
    
    plt.title(r'Prediction $\theta$ from CNN')
    plt.xlabel(r'Orientation, $\theta$ (degrees)')
    plt.ylabel(r'Predicted $\theta$ (degrees)')
    # plt.plot(tx, np.rad2deg(np.arctan2(p1[:, 0], p1[:, 1])), '.', label = 'arctan(4x)')
    plt.scatter(tx, 45*tx//45 + np.arctan2(p1[:, 0], p1[:, 1]), s=5, label=r'arctan($\frac{sin(4\theta)}{cos(4\theta)}$) + 45*x//45')
    plt.plot([0,360],[0,360], 'red', label='y=x')
    # bottom, top = plt.ylim()  # return the current ylim
    # plt.ylim((bottom, top*1.3))
    plt.legend()
    plt.show()
    
    plt.title(r'Difference of CNN predicted $\theta$ and ground truth')
    plt.xlabel(r'Orientation, $\theta$ (degrees)')
    plt.ylabel(r'$\theta$ - x (degrees)')
    plt.scatter(tx, 45*tx//45 + np.arctan2(p1[:, 0], p1[:, 1]) - tx, s=5, label=r'arctan($\frac{sin(4\theta)}{cos(4\theta)}$) + 45*x//45 - x')
    plt.plot([0,360],[0,0], 'red', label='y=x')
    bottom, top = plt.ylim()  # return the current ylim
    plt.ylim((bottom, top*1.3))
    plt.legend()
    plt.show()
    
    # acs1 = 45*tx//45 + np.rad2deg((np.arccos(nc4p)-g)/4)
    # acs2 = 45*tx//45 + np.arctan2(p1[:, 0], p1[:, 1])
    # plt.plot(tx, acs1, '.', label='arccos(nc4p)-g)/4 + 45*x//45')
    # plt.plot(tx, acs2, '.', label='arctan(p) + 45*x//45')
    # plt.plot([0,360],[0,360], label='y=x')
    # # bottom, top = plt.ylim()  # return the current ylim
    # # plt.ylim((bottom, top*1.3))
    # plt.legend()
    # plt.show()
     
    # t4 = 4*t
    # st = np.sin(test[1][:,0])
    # ct = np.cos(test[1][:,0])
    # s4p = p1[:, 0]
    # c4p = p1[:, 1]
    # '''need to normalise s4p and c4p'''
    # bs = (np.max(s4p)+np.min(s4p))/2
    # bc = (np.max(c4p)+np.min(c4p))/2
    # ns4p = (s4p-bs)/np.max(s4p-bs)
    # nc4p = (c4p-bc)/np.max(c4p-bc)
    # sp = np.sin(np.arcsin((s4p-bs)/np.max(s4p-bs))/4)
    # cp = np.cos(np.arccos((c4p-bc)/np.max(c4p-bc))/4)
    # y = np.abs(s4p*ct-st*c4p)
    # plt.plot(test[1][:,2], y, '.', 'blue')
    # plt.hlines(np.sin(np.deg2rad(3*4)), 0, 360)
    # plt.grid()
    

'''programmatically find the right integer value
start 1d projections with a chiral (pro-chiral in literature) shape like "L"
this stops the extra symmetry being a nuisance 
then try with non-chiral shapes that have a line of symmetry but no rotational symmetries'''

dim, num, max_angle, batch_size, epochs = 64, 4*1024, 360, 64, 5
sym = 4
stereo_model, cnn1_model = STEREO_model(dim, num, batch_size, epochs)
opt = keras.optimizers.Adam(learning_rate=0.01)
losses = {"stereo_out": "mse"}
lossWeights = {"stereo_out": 1.0}
stereo_model.compile(optimizer=opt, loss=losses, loss_weights=lossWeights)

#construct data
train = data(dim, num, max_angle)
X_g = np.ones((num, 1))
X_st1 = train[0][:, :dim, :, :]
X_st2 = train[0][:, dim:, :, :]
Y = train[1]
Y_train = (Y[:,1]-Y[:,0])*sym

# pick a random image
n = np.random.randint(0, num)
# define a metric for image similarity
diff = np.std(X_st1[:, :, :, 0] - X_st1[n, :, :, 0], axis=(1,2))
plt.plot(Y[:,0]-Y[0,0], diff, '.')
plt.show()

h = []

for sim in [0.2, 0.25, 0.3, 0.33, 100]:
    history2 = stereo_model.fit(x=[X_st1[diff<sim, ...], X_st2[diff<sim, ...]],
                                y=Y_train[diff<sim, ...], epochs=epochs, batch_size=batch_size)
    h.append(history2.history)  
    scatter_validation(stereo_model, cnn1_model, dim, num, max_angle, batch_size, epochs, 'false')

    plt.plot(history2.history["loss"])
    plt.yscale("log")
    plt.title('STEREO')
    plt.show()

plt.plot(np.array([he['loss'] for he in h]).flatten())
plt.yscale("log")
plt.title('STEREO')
plt.show()

opt = keras.optimizers.Adam(learning_rate=0.001)
stereo_model.compile(optimizer=opt, loss=losses, loss_weights=lossWeights)
history2 = stereo_model.fit(x=[X_st1[diff<sim, ...], X_st2[diff<sim, ...]],
                            y=Y_train[diff<sim, ...], epochs=5, batch_size=batch_size)
h.append(history2.history)  
scatter_validation(stereo_model, cnn1_model, dim, num, max_angle, batch_size, epochs, 'false')
assert False
stereo_model.save('very_nice_graphs_assumed_sym_stereo.keras')
cnn1_model.compile(optimizer=opt, loss=losses, loss_weights=lossWeights)
cnn1_model.save('very_nice_graphs_assumed_sym_cnn.keras')

import numpy as np
import matplotlib.pyplot as plt
from scipy.ndimage import gaussian_filter

from tensorflow import keras
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Flatten, MaxPooling2D, Dropout, Activation, UpSampling2D
from tensorflow.keras.layers import Dense, Conv2D, BatchNormalization, Conv2DTranspose
from tensorflow.keras.layers import Input
import tensorflow.math as tfm
import os
os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"

'''
goal:
    to input an angle and recieve an image of a square at 10deg past that angle,
    with 0 being alligned with the axes
    '''


def grid2d(size):
    '''creates values of coords up to image size, then makes grid of coords.
    does this _number_ of times to make 3d grid of unrelated slices'''
    xx, yy = np.meshgrid(np.linspace(0, size-1, size),
                         np.linspace(0, size-1, size), sparse=True)
    return xx, yy


def preprocess(x, y, grid, dim):
    '''recenters image using average mass position
    doesnt work on y height ??'''
    proc = np.where(grid > 0.3, 1, 0)
    # print(proc, '\n')
    # plt.matshow(proc)
    dx = np.sum(x*proc)/np.sum(proc)-dim/2
    dy = np.sum(y*proc)/np.sum(proc)-dim/2
    # print(dx,dy)
    im = np.roll(proc, -int(np.round(dy)), axis=0)
    im = np.roll(im, -int(np.round(dx)), axis=1)
    # this is just not moving the y coord for some reason
    # print(im)
    # plt.matshow(im)
    return im


def inside_square(space, center, size, angle, dim):
    '''takes consts and defines region where inside square, sets the grid values to 1, else 0'''
    # l is the max square radius
    nx = np.sin(angle)
    # normal vectors to edge, to determine if coord is inside or outside edge
    ny = np.cos(angle)
    im_sq = np.where((np.absolute((space[0]-center[0])*nx+(space[1]-center[1])*ny) < size/2)
                     & (np.absolute((space[0]-center[0])*ny-(space[1]-center[1])*nx) < size/2),
                     1, 0)
    # second condition uses tangent vectors to edge to find other two edges
    # absolute allows both edges to be considered at once
    # size/2 is the half side length
    im_sq = np.add(im_sq, np.random.random([dim, dim])/5)  # unprocessed image
    im_sq = gaussian_filter(im_sq, sigma=0.1)
    return preprocess(grid2d(dim)[0], grid2d(dim)[1], im_sq, dim)


def data(dim, num, max_angle):
    '''creates dataset of num dim*(2*dim) images
    max_angle in degrees
    returns arrays of shapes, the stereoimages for each shape and the angle between them'''
    a_s = np.zeros((num, 3))
    c_s = np.zeros((num, 2))

    '''these are randomised start values for the shapes'''
    xcs = ((np.random.rand(num)-0.5)*2*dim/4 + dim/2).round(1)*0+dim/2
    ycs = ((np.random.rand(num)-0.5)*2*dim/4 + dim/2).round(1)*0+dim/2
    length = ((np.random.rand(num)+1)*dim/4).round(1)
    length[:] = dim/2
    # this 0, 90 defines the angular range of results
    a1 = (np.random.uniform(0, max_angle, num))  # in degrees
    a2 = a1+10
    c_s[np.arange(num), np.zeros(num, int)] = xcs
    c_s[np.arange(num), np.zeros(num, int)+1] = ycs  # centers

    a_s[np.arange(num), np.zeros(num, int)] = (a1/180*np.pi)  # in radians
    a_s[np.arange(num), np.zeros(num, int)+1] = (a2/180*np.pi)  # in radians
    # a_s[np.arange(num), np.zeros(num,int)+2] = np.absolute((a2*10-a1*10))#in degrees
    a_s[np.arange(num), np.zeros(num, int)+2] = a1  # in degrees
    '''this is important, the validation for the training is the first angle.
    that means we will be asking for only one angle as our final output'''
    a = grid2d(dim)  # grid for making pixels on

    grid1 = []  # this is the list containing all image 1s of 2s
    grid2 = []  # stereopair images
    angle = []
    for i in np.arange(num):
        c1 = inside_square(a, c_s[i], length[i], a_s[i][0], dim)
        c2 = inside_square(a, c_s[i], length[i], a_s[i][1], dim)
        grid1.append(c1)
        grid2.append(c2)
        angle.append(a_s[i][2])
    grids = np.hstack([np.array([grid1]).reshape(-1, dim, dim, 1)*1.0,
                       np.array([grid2]).reshape(-1, dim, dim, 1)*1.0])
    return grids, a_s


def CNN_model(dim):
    '''input: image
    output: angle of image orientation'''
    input_1 = Input(shape=(dim, dim, 1))
    x = Conv2D(16, kernel_size=(3, 3), activation='relu')(input_1)
    x = MaxPooling2D(pool_size=(2, 2))(x)
    x = Dropout(0.1)(x)
    x = Conv2D(32, kernel_size=(3, 3), activation='relu')(x)
    x = MaxPooling2D(pool_size=(2, 2))(x)
    x = Dropout(0.1)(x)
    x = Conv2D(16, kernel_size=(3, 3), activation='relu')(x)
    x = MaxPooling2D(pool_size=(2, 2))(x)
    x = Dropout(0.1)(x)
    x = Flatten()(x)
    x = Dense(16, activation='relu')(x)
    output_1 = Dense(1, activation='linear', name="Angle_1")(x)
    cnn_model = Model(inputs=input_1, outputs=output_1, name='encoder')
    cnn_model.summary()
    return cnn_model


def IMG_model(dim):
    input_2 = Input(shape=(1))  # angle of shape
    x = Dense(4)(input_2)
    x = tf.reshape(x, (-1, 2, 2, 1))
    for filters in [32, 16, 8, 2, 1]:
        x = Activation("relu")(x)
        x = Conv2DTranspose(filters, 3, padding="same")(x)
        x = BatchNormalization()(x)
        x = Activation("relu")(x)
        x = Conv2DTranspose(filters, 3, padding="same")(x)
        x = BatchNormalization()(x)
        x = UpSampling2D(2)(x)

    img_model = Model(inputs=input_2, outputs=x, name="decoder")

    img_model.summary()

    return img_model

def COMBINED_model(dim):
    img_model = IMG_model(dim)
    input_1 = Input(shape=(dim, dim, 1))
    cnn_model = CNN_model(dim)
    angle = cnn_model(input_1)
    st_angle = Input(shape=(1))
    angle_2 = tfm.add(st_angle, angle)
    angle_2 = Dense(1, activation=None, use_bias=False, trainable=False,
                  kernel_initializer=keras.initializers.Constant(value=1.0), name="Angle_2")(angle_2)
    img = img_model(angle_2)
    combined_model = Model(inputs=[input_1, st_angle], outputs=img, name="en/decoder")
    combined_model.summary()
    return combined_model


dim, num, max_angle, batch_size, epochs = 64, 2048, 90, 32, 25
opt = tf.keras.optimizers.legacy.Adam(learning_rate=0.01)
train = data(dim, num, max_angle)

#data
X_1 = train[0][:, :dim, :, :]  # img1
Y_1 = train[0][:, dim:, :, :]  # img2
X_2 = train[1][:, 1] - train[1][:, 0]  # stereoangles
real_angles = train[1][:, 0]  # correct angle of first shape

#train CNN independently
cnn_model = CNN_model(dim)
cnn_model.compile(optimizer=opt, loss='mse')
history = cnn_model.fit(x=X_1, y=real_angles, epochs=epochs, batch_size=batch_size)
#display CNN training
a = cnn_model.predict(X_1)
plt.plot(np.rad2deg(real_angles), np.rad2deg(a), '.', label='predicted shape orientations')
plt.title(f'CNN_model predictions\nmax_angle={max_angle}')
plt.xlim([0,max_angle])
plt.ylim([0,max_angle])
plt.grid()
plt.show()

#train IMG separately
img_model = IMG_model(dim)
img_model.compile(optimizer=opt, loss='mse')
history = img_model.fit(x=train[1][:, 1][:,None], y=Y_1, epochs=epochs, batch_size=batch_size)
#display IMG training
a = img_model.predict(train[1][:, 1])
b = Y_1
c = np.hstack([a, b])
fig, (ax0, ax1, ax2) = plt.subplots(1, 3)
fig.suptitle(f'IMG_model, max_angle={max_angle}')
ax0.imshow(c[0][:, :, 0], cmap='gray')
ax0.set_title(f'{round(train[1][:,1][0]/np.pi*180,2)}$\degree$')
ax1.imshow(c[1][:, :, 0], cmap='gray')
ax1.set_title(f'{round(train[1][:,1][1]/np.pi*180,2)}$\degree$')
ax2.imshow(c[2][:, :, 0], cmap='gray')
ax2.set_title(f'{round(train[1][:,1][2]/np.pi*180,2)}$\degree$')

plt.show()

#train COMBINED
combined_model = COMBINED_model(dim)
combined_model.compile(optimizer=opt, loss='mse')
history = combined_model.fit(x=[X_1, X_2[:, None]], y=Y_1, epochs=35, batch_size=batch_size)
#display COMBINED training
a = combined_model.predict([X_1, X_2[:, None]])
c = np.hstack([a, b])
fig, (ax0, ax1, ax2) = plt.subplots(1, 3)
fig.suptitle(f'COMBINED_model, max_angle={max_angle}')
ax0.imshow(c[4][:, :, 0], cmap='gray')
ax0.set_title(f'{round(train[1][:,1][0]/np.pi*180,2)}$\degree$')
ax1.imshow(c[5][:, :, 0], cmap='gray')
ax1.set_title(f'{round(train[1][:,1][1]/np.pi*180,2)}$\degree$')
ax2.imshow(c[6][:, :, 0], cmap='gray')
ax2.set_title(f'{round(train[1][:,1][2]/np.pi*180,2)}$\degree$')

plt.show()
